// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldOT.context;

namespace WorldOT.Migrations
{
    [DbContext(typeof(WotDbContext))]
    [Migration("20220628095837_worldOT")]
    partial class worldOT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorldOT.Models.Race.Knights.KnightsRaceModel", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Racesid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Racesid")
                        .IsUnique()
                        .HasFilter("[Racesid] IS NOT NULL");

                    b.ToTable("KnightsRace");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KCatapult", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("Catapults");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KDoctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KDragonRider", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("DragonRider");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KSecretSpecialForces", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("SecretSpecialForces");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KSwordsman", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("Swordsmans");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.NaziRaceModel", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Racesid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Racesid")
                        .IsUnique()
                        .HasFilter("[Racesid] IS NOT NULL");

                    b.ToTable("NaziRace");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NArmed", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("NArmed");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NMortar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("NMortar");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NNurse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("NNurse");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NSniper", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("NSniper");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NWarplane", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("NWarplane");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VBalon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("VBalon");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VBarbar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("WizardRaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("WizardRaceModelid")
                        .IsUnique()
                        .HasFilter("[WizardRaceModelid] IS NOT NULL");

                    b.ToTable("VBarbar");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VSecretaxes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("VSecretaxes");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VStonethrower", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("VStonethrower");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VTapster", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("RaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RaceModelid")
                        .IsUnique()
                        .HasFilter("[RaceModelid] IS NOT NULL");

                    b.ToTable("VTapster");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.VikingRaceModel", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Racesid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Racesid")
                        .IsUnique()
                        .HasFilter("[Racesid] IS NOT NULL");

                    b.ToTable("VikingRace");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WCarpetRider", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("WizardRaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("WizardRaceModelid")
                        .IsUnique()
                        .HasFilter("[WizardRaceModelid] IS NOT NULL");

                    b.ToTable("WCarpetRider");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WCrowMan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("WizardRaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("WizardRaceModelid")
                        .IsUnique()
                        .HasFilter("[WizardRaceModelid] IS NOT NULL");

                    b.ToTable("WCrowMan");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WHealer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("WizardRaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("WizardRaceModelid")
                        .IsUnique()
                        .HasFilter("[WizardRaceModelid] IS NOT NULL");

                    b.ToTable("WHealer");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WWitcher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("WizardRaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("WizardRaceModelid")
                        .IsUnique()
                        .HasFilter("[WizardRaceModelid] IS NOT NULL");

                    b.ToTable("WWitcher");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WinvisibleMan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<string>("WizardRaceModelid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("WizardRaceModelid")
                        .IsUnique()
                        .HasFilter("[WizardRaceModelid] IS NOT NULL");

                    b.ToTable("WinvisibleMan");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.WizardRaceModel", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Racesid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Racesid")
                        .IsUnique()
                        .HasFilter("[Racesid] IS NOT NULL");

                    b.ToTable("WizardRace");
                });

            modelBuilder.Entity("WorldOT.Models.Source.CoalModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sourcesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Sourcesid")
                        .IsUnique()
                        .HasFilter("[Sourcesid] IS NOT NULL");

                    b.ToTable("Coal");
                });

            modelBuilder.Entity("WorldOT.Models.Source.GrapesModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sourcesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Sourcesid")
                        .IsUnique()
                        .HasFilter("[Sourcesid] IS NOT NULL");

                    b.ToTable("Grapes");
                });

            modelBuilder.Entity("WorldOT.Models.Source.IronModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sourcesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Sourcesid")
                        .IsUnique()
                        .HasFilter("[Sourcesid] IS NOT NULL");

                    b.ToTable("Iron");
                });

            modelBuilder.Entity("WorldOT.Models.Source.StoneModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sourcesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Sourcesid")
                        .IsUnique()
                        .HasFilter("[Sourcesid] IS NOT NULL");

                    b.ToTable("Stone");
                });

            modelBuilder.Entity("WorldOT.Models.Source.SulfurModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sourcesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Sourcesid")
                        .IsUnique()
                        .HasFilter("[Sourcesid] IS NOT NULL");

                    b.ToTable("Sulfur");
                });

            modelBuilder.Entity("WorldOT.Models.Source.WheatModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sourcesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Sourcesid")
                        .IsUnique()
                        .HasFilter("[Sourcesid] IS NOT NULL");

                    b.ToTable("Wheat");
                });

            modelBuilder.Entity("WorldOT.Models.Source.WoodModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sourcesid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("count")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("Sourcesid")
                        .IsUnique()
                        .HasFilter("[Sourcesid] IS NOT NULL");

                    b.ToTable("Wood");
                });

            modelBuilder.Entity("WorldOT.Models.User.Buildings.Storeg", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("Anbar");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Coordinates", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("X")
                        .HasColumnType("bigint");

                    b.Property<long>("Y")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("coordinates");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Level", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("level");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Races", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("race")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("RaceOfSoliders");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.UserM", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailIsVerif")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Satisfied")
                        .HasColumnType("int");

                    b.Property<long>("SpaceInUse")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Wealth", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Coin")
                        .HasColumnType("bigint");

                    b.Property<long>("Diamonds")
                        .HasColumnType("bigint");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Wealth");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.CoalMine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("coalMine");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.CuttingWood", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("CuttingWood");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.Farm", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("Farm");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.GrapeGarden", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("GrapeGarden");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.Smithy", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("Smithy");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.SoliderHouse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("SoliderHouses");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.StoneMine", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("StoneMine");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.Volcano", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("Volcano");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.WorkerBuilding", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Buildingid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Workers")
                        .HasColumnType("int");

                    b.Property<int>("lev")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Buildingid")
                        .IsUnique()
                        .HasFilter("[Buildingid] IS NOT NULL");

                    b.ToTable("WorkerBuilding");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.KnightsRaceModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.Races", "Races")
                        .WithOne("KnightsRace")
                        .HasForeignKey("WorldOT.Models.Race.Knights.KnightsRaceModel", "Racesid");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KCatapult", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Knights.KnightsRaceModel", "RaceModel")
                        .WithOne("Catapults")
                        .HasForeignKey("WorldOT.Models.Race.Knights.Soliders.KCatapult", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KDoctor", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Knights.KnightsRaceModel", "RaceModel")
                        .WithOne("Doctors")
                        .HasForeignKey("WorldOT.Models.Race.Knights.Soliders.KDoctor", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KDragonRider", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Knights.KnightsRaceModel", "RaceModel")
                        .WithOne("DragonRider")
                        .HasForeignKey("WorldOT.Models.Race.Knights.Soliders.KDragonRider", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KSecretSpecialForces", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Knights.KnightsRaceModel", "RaceModel")
                        .WithOne("SecretSpecialForces")
                        .HasForeignKey("WorldOT.Models.Race.Knights.Soliders.KSecretSpecialForces", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.Soliders.KSwordsman", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Knights.KnightsRaceModel", "RaceModel")
                        .WithOne("Swordsmans")
                        .HasForeignKey("WorldOT.Models.Race.Knights.Soliders.KSwordsman", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.NaziRaceModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.Races", "Races")
                        .WithOne("NaziRace")
                        .HasForeignKey("WorldOT.Models.Race.Nazi.NaziRaceModel", "Racesid");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NArmed", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Nazi.NaziRaceModel", "RaceModel")
                        .WithOne("Armed")
                        .HasForeignKey("WorldOT.Models.Race.Nazi.Soliders.NArmed", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NMortar", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Nazi.NaziRaceModel", "RaceModel")
                        .WithOne("Mortars")
                        .HasForeignKey("WorldOT.Models.Race.Nazi.Soliders.NMortar", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NNurse", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Nazi.NaziRaceModel", "RaceModel")
                        .WithOne("Nurses")
                        .HasForeignKey("WorldOT.Models.Race.Nazi.Soliders.NNurse", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NSniper", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Nazi.NaziRaceModel", "RaceModel")
                        .WithOne("Hacker")
                        .HasForeignKey("WorldOT.Models.Race.Nazi.Soliders.NSniper", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.Soliders.NWarplane", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Nazi.NaziRaceModel", "RaceModel")
                        .WithOne("Warplanes")
                        .HasForeignKey("WorldOT.Models.Race.Nazi.Soliders.NWarplane", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VBalon", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Viking.VikingRaceModel", "RaceModel")
                        .WithOne("Balons")
                        .HasForeignKey("WorldOT.Models.Race.Viking.Soliders.VBalon", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VBarbar", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Viking.VikingRaceModel", "WizardRaceModel")
                        .WithOne("Barbars")
                        .HasForeignKey("WorldOT.Models.Race.Viking.Soliders.VBarbar", "WizardRaceModelid");

                    b.Navigation("WizardRaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VSecretaxes", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Viking.VikingRaceModel", "RaceModel")
                        .WithOne("Secretaxes")
                        .HasForeignKey("WorldOT.Models.Race.Viking.Soliders.VSecretaxes", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VStonethrower", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Viking.VikingRaceModel", "RaceModel")
                        .WithOne("Stonethrowers")
                        .HasForeignKey("WorldOT.Models.Race.Viking.Soliders.VStonethrower", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.Soliders.VTapster", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Viking.VikingRaceModel", "RaceModel")
                        .WithOne("Tapster")
                        .HasForeignKey("WorldOT.Models.Race.Viking.Soliders.VTapster", "RaceModelid");

                    b.Navigation("RaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.VikingRaceModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.Races", "Races")
                        .WithOne("VikingRace")
                        .HasForeignKey("WorldOT.Models.Race.Viking.VikingRaceModel", "Racesid");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WCarpetRider", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Wizard.WizardRaceModel", "WizardRaceModel")
                        .WithOne("CarpetRiders")
                        .HasForeignKey("WorldOT.Models.Race.Wizard.Soliders.WCarpetRider", "WizardRaceModelid");

                    b.Navigation("WizardRaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WCrowMan", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Wizard.WizardRaceModel", "WizardRaceModel")
                        .WithOne("CrowMans")
                        .HasForeignKey("WorldOT.Models.Race.Wizard.Soliders.WCrowMan", "WizardRaceModelid");

                    b.Navigation("WizardRaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WHealer", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Wizard.WizardRaceModel", "WizardRaceModel")
                        .WithOne("Healers")
                        .HasForeignKey("WorldOT.Models.Race.Wizard.Soliders.WHealer", "WizardRaceModelid");

                    b.Navigation("WizardRaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WWitcher", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Wizard.WizardRaceModel", "WizardRaceModel")
                        .WithOne("Witchers")
                        .HasForeignKey("WorldOT.Models.Race.Wizard.Soliders.WWitcher", "WizardRaceModelid");

                    b.Navigation("WizardRaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.Soliders.WinvisibleMan", b =>
                {
                    b.HasOne("WorldOT.Models.Race.Wizard.WizardRaceModel", "WizardRaceModel")
                        .WithOne("invisibleMans")
                        .HasForeignKey("WorldOT.Models.Race.Wizard.Soliders.WinvisibleMan", "WizardRaceModelid");

                    b.Navigation("WizardRaceModel");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.WizardRaceModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.Races", "Races")
                        .WithOne("WizardRace")
                        .HasForeignKey("WorldOT.Models.Race.Wizard.WizardRaceModel", "Racesid");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("WorldOT.Models.Source.CoalModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Sources")
                        .WithOne("Coal")
                        .HasForeignKey("WorldOT.Models.Source.CoalModel", "Sourcesid");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WorldOT.Models.Source.GrapesModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Sources")
                        .WithOne("Grapes")
                        .HasForeignKey("WorldOT.Models.Source.GrapesModel", "Sourcesid");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WorldOT.Models.Source.IronModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Sources")
                        .WithOne("Iron")
                        .HasForeignKey("WorldOT.Models.Source.IronModel", "Sourcesid");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WorldOT.Models.Source.StoneModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Sources")
                        .WithOne("Stone")
                        .HasForeignKey("WorldOT.Models.Source.StoneModel", "Sourcesid");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WorldOT.Models.Source.SulfurModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Sources")
                        .WithOne("Sulfur")
                        .HasForeignKey("WorldOT.Models.Source.SulfurModel", "Sourcesid");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WorldOT.Models.Source.WheatModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Sources")
                        .WithOne("Wheat")
                        .HasForeignKey("WorldOT.Models.Source.WheatModel", "Sourcesid");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WorldOT.Models.Source.WoodModel", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Sources")
                        .WithOne("Wood")
                        .HasForeignKey("WorldOT.Models.Source.WoodModel", "Sourcesid");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("WorldOT.Models.User.Buildings.Storeg", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("Storeg")
                        .HasForeignKey("WorldOT.Models.User.Buildings.Storeg", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Coordinates", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "User")
                        .WithOne("coordinates")
                        .HasForeignKey("WorldOT.Models.User.UserModel.Coordinates", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Level", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "User")
                        .WithOne("level")
                        .HasForeignKey("WorldOT.Models.User.UserModel.Level", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Races", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "User")
                        .WithOne("RaceOfSoliders")
                        .HasForeignKey("WorldOT.Models.User.UserModel.Races", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Wealth", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "User")
                        .WithOne("Wealth")
                        .HasForeignKey("WorldOT.Models.User.UserModel.Wealth", "UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.CoalMine", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("CoalMine")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.CoalMine", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.CuttingWood", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("CuttingWood")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.CuttingWood", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.Farm", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("Farm")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.Farm", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.GrapeGarden", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("GrapeGarden")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.GrapeGarden", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.Smithy", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("Smithy")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.Smithy", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.SoliderHouse", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("SoliderHouse")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.SoliderHouse", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.StoneMine", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("StoneMine")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.StoneMine", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.Volcano", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("Volcano")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.Volcano", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.User.building.Buildings.WorkerBuilding", b =>
                {
                    b.HasOne("WorldOT.Models.User.UserModel.UserM", "Building")
                        .WithOne("workersBuilding")
                        .HasForeignKey("WorldOT.Models.User.building.Buildings.WorkerBuilding", "Buildingid");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Knights.KnightsRaceModel", b =>
                {
                    b.Navigation("Catapults");

                    b.Navigation("Doctors");

                    b.Navigation("DragonRider");

                    b.Navigation("SecretSpecialForces");

                    b.Navigation("Swordsmans");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Nazi.NaziRaceModel", b =>
                {
                    b.Navigation("Armed");

                    b.Navigation("Hacker");

                    b.Navigation("Mortars");

                    b.Navigation("Nurses");

                    b.Navigation("Warplanes");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Viking.VikingRaceModel", b =>
                {
                    b.Navigation("Balons");

                    b.Navigation("Barbars");

                    b.Navigation("Secretaxes");

                    b.Navigation("Stonethrowers");

                    b.Navigation("Tapster");
                });

            modelBuilder.Entity("WorldOT.Models.Race.Wizard.WizardRaceModel", b =>
                {
                    b.Navigation("CarpetRiders");

                    b.Navigation("CrowMans");

                    b.Navigation("Healers");

                    b.Navigation("invisibleMans");

                    b.Navigation("Witchers");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.Races", b =>
                {
                    b.Navigation("KnightsRace");

                    b.Navigation("NaziRace");

                    b.Navigation("VikingRace");

                    b.Navigation("WizardRace");
                });

            modelBuilder.Entity("WorldOT.Models.User.UserModel.UserM", b =>
                {
                    b.Navigation("Coal");

                    b.Navigation("CoalMine");

                    b.Navigation("coordinates");

                    b.Navigation("CuttingWood");

                    b.Navigation("Farm");

                    b.Navigation("GrapeGarden");

                    b.Navigation("Grapes");

                    b.Navigation("Iron");

                    b.Navigation("level");

                    b.Navigation("RaceOfSoliders");

                    b.Navigation("Smithy");

                    b.Navigation("SoliderHouse");

                    b.Navigation("Stone");

                    b.Navigation("StoneMine");

                    b.Navigation("Storeg");

                    b.Navigation("Sulfur");

                    b.Navigation("Volcano");

                    b.Navigation("Wealth");

                    b.Navigation("Wheat");

                    b.Navigation("Wood");

                    b.Navigation("workersBuilding");
                });
#pragma warning restore 612, 618
        }
    }
}
